package rishl7

import "net/http"
import "strconv"

import "encoding/json"
import "errors"
import "io/ioutil"
import "log"

import "encoding/base64"


const htmlData = ""

//main srv class
type HL7Js struct {
	hl7c HL7Client
}

//start and init srv
func (srv *HL7Js) Start(listenPort int) error {
	http.HandleFunc("/sendmsg", srv.SendMsg)
	http.HandleFunc("/", srv.Redirect)
	http.HandleFunc("/index.html", srv.index)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return errors.New("error: can't start listen http server")
	}
	return nil
}

//serve main page request
func (srv *HL7Js) index(rwr http.ResponseWriter, req *http.Request) {
	rwr.Header().Set("Content-Type: text/html", "*")

	content, err := ioutil.ReadFile("index.html")
	if err != nil {
		log.Println("warning: start page not found, return included page")
		val, _ := base64.StdEncoding.DecodeString(htmlData)
		rwr.Write(val)
		return
	}
	rwr.Write(content)
}

func (service *HL7Js) Redirect(responseWriter http.ResponseWriter, request *http.Request) {
	http.Redirect(responseWriter, request, "/index.html", 301)
}

//serve cEcho responce
func (srv *HL7Js) SendMsg(rwr http.ResponseWriter, httpreq *http.Request) {
	defer httpreq.Body.Close()
	bodyData, err := ioutil.ReadAll(httpreq.Body)
	if err != nil {
		strErr := "error: Can't read http body data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}
	//parse http request
	var req Hl7Request
	if err := json.Unmarshal(bodyData, &req); err != nil {
		strErr := "error: can't parse request data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}
	//parse decode base64 encoded data
	data, err := base64.StdEncoding.DecodeString(req.Data)
	if err != nil {
		log.Println(err)
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return
	}
	//use hl7 client to send data
	redat, err := srv.hl7c.SendHL7Data(data, req.Hl7c)
	if err != nil {
		log.Println(err)
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return

	}
	//send
	rwr.Write(redat)
}
