package main

import "net/http"
import "strconv"

import "encoding/json"
import "errors"
import "io/ioutil"
import "log"

import "encoding/base64"

const htmlData = "PCFkb2N0eXBlIGh0bWw+DQo8aHRtbD4NCg0KPGhlYWQ+DQoJPHRpdGxlPmR0b29scyBVSTwvdGl0bGU+DQoJPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCI+DQoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3Rzd2F0Y2gvMy4wLjAvc2xhdGUvYm9vdHN0cmFwLm1pbi5jc3MiPg0KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzIuMC4zL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0Pg0KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMS4xL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0Pg0KCTxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQoJCWJvZHkgew0KCQkJcGFkZGluZy10b3A6IDIwcHg7DQoJCX0NCgkJDQoJCS5mb290ZXIgew0KCQkJYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWU7DQoJCQltYXJnaW4tdG9wOiA0MHB4Ow0KCQkJcGFkZGluZy10b3A6IDQwcHg7DQoJCQlwYWRkaW5nLWJvdHRvbTogNDBweDsNCgkJfQ0KCQkvKiBNYWluIG1hcmtldGluZyBtZXNzYWdlIGFuZCBzaWduIHVwIGJ1dHRvbiAqLw0KCQkNCgkJLmp1bWJvdHJvbiB7DQoJCQl0ZXh0LWFsaWduOiBjZW50ZXI7DQoJCQliYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsNCgkJfQ0KCQkNCgkJLmp1bWJvdHJvbiAuYnRuIHsNCgkJCWZvbnQtc2l6ZTogMjFweDsNCgkJCXBhZGRpbmc6IDE0cHggMjRweDsNCgkJfQ0KCQkvKiBDdXN0b21pemUgdGhlIG5hdi1qdXN0aWZpZWQgbGlua3MgdG8gYmUgZmlsbCB0aGUgZW50aXJlIHNwYWNlIG9mIHRoZSAubmF2YmFyICovDQoJCQ0KCQkubmF2LWp1c3RpZmllZCB7DQoJCQliYWNrZ3JvdW5kLWNvbG9yOiAjZWVlOw0KCQkJYm9yZGVyLXJhZGl1czogNXB4Ow0KCQkJYm9yZGVyOiAxcHggc29saWQgI2NjYzsNCgkJfQ0KCQkNCgkJLm5hdi1qdXN0aWZpZWQgPiBsaSA+IGEgew0KCQkJcGFkZGluZy10b3A6IDE1cHg7DQoJCQlwYWRkaW5nLWJvdHRvbTogMTVweDsNCgkJCWNvbG9yOiAjNzc3Ow0KCQkJZm9udC13ZWlnaHQ6IGJvbGQ7DQoJCQl0ZXh0LWFsaWduOiBjZW50ZXI7DQoJCQlib3JkZXItYm90dG9tOiAxcHggc29saWQgI2Q1ZDVkNTsNCgkJCWJhY2tncm91bmQtY29sb3I6ICNlNWU1ZTU7DQoJCQkvKiBPbGQgYnJvd3NlcnMgKi8NCgkJCQ0KCQkJYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdC14Ow0KCQkJLyogUmVwZWF0IHRoZSBncmFkaWVudCAqLw0KCQkJDQoJCQliYWNrZ3JvdW5kLWltYWdlOiAtbW96LWxpbmVhci1ncmFkaWVudCh0b3AsICNmNWY1ZjUgMCUsICNlNWU1ZTUgMTAwJSk7DQoJCQkvKiBGRjMuNisgKi8NCgkJCQ0KCQkJYmFja2dyb3VuZC1pbWFnZTogLXdlYmtpdC1ncmFkaWVudChsaW5lYXIsIGxlZnQgdG9wLCBsZWZ0IGJvdHRvbSwgY29sb3Itc3RvcCgwJSwgI2Y1ZjVmNSksIGNvbG9yLXN0b3AoMTAwJSwgI2U1ZTVlNSkpOw0KCQkJLyogQ2hyb21lLFNhZmFyaTQrICovDQoJCQkNCgkJCWJhY2tncm91bmQtaW1hZ2U6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvcCwgI2Y1ZjVmNSAwJSwgI2U1ZTVlNSAxMDAlKTsNCgkJCS8qIENocm9tZSAxMCssU2FmYXJpIDUuMSsgKi8NCgkJCQ0KCQkJYmFja2dyb3VuZC1pbWFnZTogLW1zLWxpbmVhci1ncmFkaWVudCh0b3AsICNmNWY1ZjUgMCUsICNlNWU1ZTUgMTAwJSk7DQoJCQkvKiBJRTEwKyAqLw0KCQkJDQoJCQliYWNrZ3JvdW5kLWltYWdlOiAtby1saW5lYXItZ3JhZGllbnQodG9wLCAjZjVmNWY1IDAlLCAjZTVlNWU1IDEwMCUpOw0KCQkJLyogT3BlcmEgMTEuMTArICovDQoJCQkNCgkJCWZpbHRlcjogcHJvZ2lkOiBEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChzdGFydENvbG9yc3RyPScjZjVmNWY1JywgZW5kQ29sb3JzdHI9JyNlNWU1ZTUnLCBHcmFkaWVudFR5cGU9MCk7DQoJCQkvKiBJRTYtOSAqLw0KCQkJDQoJCQliYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG9wLCAjZjVmNWY1IDAlLCAjZTVlNWU1IDEwMCUpOw0KCQkJLyogVzNDICovDQoJCX0NCgkJDQoJCS5uYXYtanVzdGlmaWVkID4gLmFjdGl2ZSA+IGEsDQoJCS5uYXYtanVzdGlmaWVkID4gLmFjdGl2ZSA+IGE6aG92ZXIsDQoJCS5uYXYtanVzdGlmaWVkID4gLmFjdGl2ZSA+IGE6Zm9jdXMgew0KCQkJYmFja2dyb3VuZC1jb2xvcjogI2RkZDsNCgkJCWJhY2tncm91bmQtaW1hZ2U6IG5vbmU7DQoJCQlib3gtc2hhZG93OiBpbnNldCAwIDNweCA3cHggcmdiYSgwLCAwLCAwLCAuMTUpOw0KCQl9DQoJCQ0KCQkubmF2LWp1c3RpZmllZCA+IGxpOmZpcnN0LWNoaWxkID4gYSB7DQoJCQlib3JkZXItcmFkaXVzOiA1cHggNXB4IDAgMDsNCgkJfQ0KCQkNCgkJLm5hdi1qdXN0aWZpZWQgPiBsaTpsYXN0LWNoaWxkID4gYSB7DQoJCQlib3JkZXItYm90dG9tOiAwOw0KCQkJYm9yZGVyLXJhZGl1czogMCAwIDVweCA1cHg7DQoJCX0NCgkJDQoJCUBtZWRpYShtaW4td2lkdGg6IDc2OHB4KSB7DQoJCQkubmF2LWp1c3RpZmllZCB7DQoJCQkJbWF4LWhlaWdodDogNTJweDsNCgkJCX0NCgkJCS5uYXYtanVzdGlmaWVkID4gbGkgPiBhIHsNCgkJCQlib3JkZXItbGVmdDogMXB4IHNvbGlkICNmZmY7DQoJCQkJYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2Q1ZDVkNTsNCgkJCX0NCgkJCS5uYXYtanVzdGlmaWVkID4gbGk6Zmlyc3QtY2hpbGQgPiBhIHsNCgkJCQlib3JkZXItbGVmdDogMDsNCgkJCQlib3JkZXItcmFkaXVzOiA1cHggMCAwIDVweDsNCgkJCX0NCgkJCS5uYXYtanVzdGlmaWVkID4gbGk6bGFzdC1jaGlsZCA+IGEgew0KCQkJCWJvcmRlci1yYWRpdXM6IDAgNXB4IDVweCAwOw0KCQkJCWJvcmRlci1yaWdodDogMDsNCgkJCX0NCgkJfQ0KCQkvKiBSZXNwb25zaXZlOiBQb3J0cmFpdCB0YWJsZXRzIGFuZCB1cCAqLw0KCQkNCgkJQG1lZGlhIHNjcmVlbiBhbmQobWluLXdpZHRoOiA3NjhweCkgew0KCQkJLyogUmVtb3ZlIHRoZSBwYWRkaW5nIHdlIHNldCBlYXJsaWVyICovDQoJCQkNCgkJCS5tYXN0aGVhZCwNCgkJCS5tYXJrZXRpbmcsDQoJCQkuZm9vdGVyIHsNCgkJCQlwYWRkaW5nLWxlZnQ6IDA7DQoJCQkJcGFkZGluZy1yaWdodDogMDsNCgkJCX0NCgkJfQ0KCTwvc3R5bGU+DQoJPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPg0KCQl2YXIgY2ZUaW1lID0gbmV3IERhdGUoKTsNCgkJdmFyIGN1cmRpciA9ICIiDQoJCXZhciBkaXNBbGl2ZSA9IHRydWUNCgkJdmFyIFNob3dNZW51ID0gInNlYXJjaCINCgkJdmFyIGNVcGxvYWRGID0gIiINCg0KCQlmdW5jdGlvbiB1cGRhdGVDRWNob1N0KCkgew0KCQkJdmFyIGNFQ2hvUmVxID0gew0KCQkJCUFkZHJlc3M6ICQoIiNhZGRyZXNzLWlkIikudmFsKCksDQoJCQkJUG9ydDogJCgiI3BvcnQtaWQiKS52YWwoKSwNCgkJCQlDbGllbnRBRV9UaXRsZTogJCgiI2NsaWVudC1hZXRpdGxlLWlkIikudmFsKCksDQoJCQkJU2VydmVyQUVfVGl0bGU6ICQoIiNzZXJ2ZXItYWV0aXRsZS1pZCIpLnZhbCgpDQoJCQl9Ow0KCQkJJC5hamF4KHsNCgkJCQl1cmw6ICIvYy1lY2hvIiwNCgkJCQl0eXBlOiAiUE9TVCIsDQoJCQkJZGF0YTogSlNPTi5zdHJpbmdpZnkoY0VDaG9SZXEpLA0KCQkJCWRhdGFUeXBlOiAianNvbiINCgkJCX0pLmRvbmUoZnVuY3Rpb24oanNvbkRhdGEpIHsNCgkJCQlkaXNBbGl2ZSA9IGpzb25EYXRhLklzQWxpdmUNCgkJCQl1cGRhdGVVaSgpDQoJCQl9KQ0KCQl9DQoNCgkJZnVuY3Rpb24gdXBkYXRlVWkoKSB7DQoJCQlpZiAoZGlzQWxpdmUpIHsNCgkJCQkkKCIjcGFjcy1zdGF0dXMtaWQiKS50ZXh0KCJvayIpDQoJCQl9IGVsc2Ugew0KCQkJCSQoIiNwYWNzLXN0YXR1cy1pZCIpLnRleHQoIm5vIGNvbm5lY3Rpb24iKQ0KCQkJfQ0KCQkJaWYgKGRpc0FsaXZlICYmIChTaG93TWVudSA9PSAic2VhcmNoIikpIHsNCgkJCQkkKCIjc2VhcmNoLXBhbmVsIikuc2hvdygpDQoJCQkJJCgiI3NlYXJjaC1mb290ZXIiKS5zaG93KCkNCgkJCQkkKCIjc2VyZm9vdGVyLWlkIikuc2hvdygpDQoJCQkJJCgiI3NlcnRhYmxlLWlkIikuc2hvdygpDQoJCQl9IGVsc2Ugew0KCQkJCSQoIiNzZWFyY2gtcGFuZWwiKS5oaWRlKCk7DQoJCQkJJCgiI3NlYXJjaC1mb290ZXIiKS5oaWRlKCkNCgkJCQkkKCIjc2VyZm9vdGVyLWlkIikuaGlkZSgpDQoJCQkJJCgiI3NlcnRhYmxlLWlkIikuaGlkZSgpDQoJCQl9DQoJCQlpZiAoZGlzQWxpdmUgJiYgKFNob3dNZW51ID09ICJ1cGxvYWQiKSkgew0KCQkJCSQoIiNmaWxlcy10YWIiKS5zaG93KCkNCgkJCQkkKCIjdXBsb2FkZm9vdGVyLWlkIikuc2hvdygpDQoJCQl9IGVsc2Ugew0KCQkJCSQoIiN1cGxvYWRmb290ZXItaWQiKS5oaWRlKCkNCgkJCQkkKCIjZmlsZXMtdGFiIikuaGlkZSgpDQoJCQl9DQoJCQlpZiAoZGlzQWxpdmUgJiYgKFNob3dNZW51ID09ICJqb2JzIikpIHsNCgkJCQkkKCIjam9ic2xpc3Rmb290ZXItaWQiKS5zaG93KCkNCgkJCQkkKCIjam9ic2xpc3QiKS5zaG93KCkNCgkJCX0gZWxzZSB7DQoJCQkJJCgiI2pvYnNsaXN0Zm9vdGVyLWlkIikuaGlkZSgpDQoJCQkJJCgiI2pvYnNsaXN0IikuaGlkZSgpDQoJCQl9DQoJCX0NCg0KCQlmdW5jdGlvbiBzZW5kQ0ZpbmQoKSB7DQoJCQl1cGRhdGVKb2JzKCkNCgkJCXZhciBjZmRhdCA9IHsNCgkJCQlTZXJ2ZXJTZXQ6IHsNCgkJCQkJQWRkcmVzczogJCgiI2FkZHJlc3MtaWQiKS52YWwoKSwNCgkJCQkJUG9ydDogJCgiI3BvcnQtaWQiKS52YWwoKSwNCgkJCQkJQ2xpZW50QUVfVGl0bGU6ICQoIiNjbGllbnQtYWV0aXRsZS1pZCIpLnZhbCgpLA0KCQkJCQlTZXJ2ZXJBRV9UaXRsZTogJCgiI3NlcnZlci1hZXRpdGxlLWlkIikudmFsKCkNCgkJCQl9LA0KCQkJCVN0dWR5SW5zdGFuY2VVSUQ6ICQoIiNzdC1pbnN0LXVpZCIpLnZhbCgpLA0KCQkJCVBhdGllbnROYW1lOiAkKCIjcGF0aWVudC1uYW1lLWlkIikudmFsKCksDQoJCQkJQWNjZXNzaW9uTnVtYmVyOiAkKCIjYWNjZXNzaW9uLW51bWJlci1pZCIpLnZhbCgpLA0KCQkJCVBhdGllbkRhdGVPZkJpcnRoOiAkKCIjZGF0ZS1iaXJ0aC1pZCIpLnZhbCgpLA0KCQkJCVN0dWR5RGF0ZTogJCgiI3N0dWR5LWRhdGUtaWQiKS52YWwoKQ0KCQkJfTsNCgkJCSQuYWpheCh7DQoJCQkJdXJsOiAiL2MtZmluZCIsDQoJCQkJdHlwZTogIlBPU1QiLA0KCQkJCWRhdGE6IEpTT04uc3RyaW5naWZ5KGNmZGF0KSwNCgkJCQlkYXRhVHlwZTogImpzb24iDQoJCQl9KS5kb25lKGZ1bmN0aW9uKGpzb25EYXRhKSB7DQoJCQkJJCgiI3NlcmNocmVzbGlzdCIpLnJlbW92ZSgpDQoJCQkJdmFyIGluZXJIdG1sID0gIiINCgkJCQlpbmVySHRtbCA9IGluZXJIdG1sLmNvbmNhdCgnPHRib2R5IGlkPSJzZXJjaHJlc2xpc3QiPicpDQoJCQkJZm9yIChpbmRleCBpbiBqc29uRGF0YSkgew0KCQkJCQlhbiA9IGpzb25EYXRhW2luZGV4XS5BY2Nlc3Npb25OdW1iZXINCgkJCQkJcGQgPSBqc29uRGF0YVtpbmRleF0uUGF0aWVuRGF0ZU9mQmlydGgNCgkJCQkJc2QgPSBqc29uRGF0YVtpbmRleF0uU3R1ZHlEYXRlDQoJCQkJCXBuID0ganNvbkRhdGFbaW5kZXhdLlBhdGllbnROYW1lDQoJCQkJCXN0dWlkID0ganNvbkRhdGFbaW5kZXhdLlN0dWR5SW5zdGFuY2VVSUQNCgkJCQkJZ3UgPSBjcmVhdGVVVUlEKCkNCgkJCQkJaW5lckh0bWwgPSBpbmVySHRtbC5jb25jYXQoJzx0cj4nKQ0KCQkJCQlpbmVySHRtbCA9IGluZXJIdG1sLmNvbmNhdCgnPHRkPjxhIGlkPSInICsgZ3UgKyAnIiBvbmNsaWNrPSJzZW5kQ0dldCh0aGlzKSIgY2xhc3M9ImJ0biBwdWxsLWxlZnQgYnRuLXN1Y2Nlc3MgYnRuLXhzIj5Eb3dubG9hZDwvYT48L3RkPicpDQoJCQkJCWluZXJIdG1sID0gaW5lckh0bWwuY29uY2F0KCc8dGQgaWQ9IicgKyAnc3R1aWQnICsgZ3UgKyAnIiA+JyArIHN0dWlkICsgJzwvdGQ+JykNCgkJCQkJaW5lckh0bWwgPSBpbmVySHRtbC5jb25jYXQoJzx0ZCBpZD0iJyArICdhbicgKyBndSArICciID4nICsgYW4gKyAnPC90ZD4nKQ0KCQkJCQlpbmVySHRtbCA9IGluZXJIdG1sLmNvbmNhdCgnPHRkIGlkPSInICsgJ3BuJyArIGd1ICsgJyIgPicgKyBwbiArICc8L3RkPicpDQoJCQkJCWluZXJIdG1sID0gaW5lckh0bWwuY29uY2F0KCc8dGQgaWQ9IicgKyAncGQnICsgZ3UgKyAnIiA+JyArIHBkICsgJzwvdGQ+JykNCgkJCQkJaW5lckh0bWwgPSBpbmVySHRtbC5jb25jYXQoJzx0ZCBpZD0iJyArICdzZCcgKyBndSArICciID4nICsgc2QgKyAnPC90ZD4nKQ0KCQkJCQlpbmVySHRtbCA9IGluZXJIdG1sLmNvbmNhdCgnPC90cj4nKQ0KCQkJCX0NCgkJCQlpbmVySHRtbCA9IGluZXJIdG1sLmNvbmNhdCgnIDwvdGJvZHk+JykNCgkJCQkkKCIjc2VydGFibGUtaWQiKS5hcHBlbmQoaW5lckh0bWwpDQoJCQkJY29uc29sZS5sb2coanNvbkRhdGEuQ2ZpbmRSZXMpDQoJCQl9KQ0KCQl9DQoNCgkJZnVuY3Rpb24gY3JlYXRlVVVJRCgpIHsNCgkJCS8vIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzQxMjIudHh0DQoJCQl2YXIgcyA9IFtdOw0KCQkJdmFyIGhleERpZ2l0cyA9ICIwMTIzNDU2Nzg5QUJDREVGIjsNCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgew0KCQkJCXNbaV0gPSBoZXhEaWdpdHMuc3Vic3RyKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTApLCAxKTsNCgkJCX0NCgkJCXNbMTJdID0gIjQiOyAvLyBiaXRzIDEyLTE1IG9mIHRoZSB0aW1lX2hpX2FuZF92ZXJzaW9uIGZpZWxkIHRvIDAwMTANCgkJCXNbMTZdID0gaGV4RGlnaXRzLnN1YnN0cigoc1sxNl0gJiAweDMpIHwgMHg4LCAxKTsgLy8gYml0cyA2LTcgb2YgdGhlIGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWQgdG8gMDENCgkJCXZhciB1dWlkID0gcy5qb2luKCIiKTsNCgkJCXJldHVybiB1dWlkOw0KCQl9DQoNCgkJZnVuY3Rpb24gY2hEaXIoZSkgew0KCQkJdmFyIG5EaXIgPSB7DQoJCQkJTmV3OiBlLmlkLA0KCQkJCUN1ckRpcjogY3VyZGlyDQoJCQl9Ow0KCQkJJC5hamF4KHsNCgkJCQl1cmw6ICIvY2hkIiwNCgkJCQl0eXBlOiAiUE9TVCIsDQoJCQkJZGF0YVR5cGU6ICJqc29uIiwNCgkJCQlkYXRhOiBKU09OLnN0cmluZ2lmeShuRGlyKQ0KCQkJfSkuZG9uZShkaXJVcGRhdGUpDQoJCX0NCg0KCQlmdW5jdGlvbiBmaXJzVXBkYXRlKCkgew0KCQkJdmFyIG5EaXIgPSB7DQoJCQkJTmV3OiAiLiIsDQoJCQkJQ3VyRGlyOiAiLiINCgkJCX07DQoJCQkkLmFqYXgoew0KCQkJCXVybDogIi9jaGQiLA0KCQkJCXR5cGU6ICJQT1NUIiwNCgkJCQlkYXRhVHlwZTogImpzb24iLA0KCQkJCWRhdGE6IEpTT04uc3RyaW5naWZ5KG5EaXIpDQoJCQl9KS5kb25lKGRpclVwZGF0ZSkNCgkJfQ0KDQoJCWZ1bmN0aW9uIGRpclVwZGF0ZShqc29uRGF0YSkgew0KCQkJJCgiI2ZpbGVzLWlkIikucmVtb3ZlKCkNCgkJCWN1cmRpciA9IGpzb25EYXRhLkN1ckRpcg0KCQkJY29uc29sZS5sb2coanNvbkRhdGEpDQoJCQl2YXIgaW5lckh0bWxmaWxlcyA9ICIiDQoJCQlpbmVySHRtbGZpbGVzID0gaW5lckh0bWxmaWxlcy5jb25jYXQoJzx0Ym9keSBpZD0iZmlsZXMtaWQiPicpDQoJCQlpbmVySHRtbGZpbGVzID0gaW5lckh0bWxmaWxlcy5jb25jYXQoJzx0cj48dGQ+PC90ZD4nKQ0KCQkJaW5lckh0bWxmaWxlcyA9IGluZXJIdG1sZmlsZXMuY29uY2F0KCc8dGQgb25jbGljaz0iY2hEaXIodGhpcykiIGlkPSIuLiI+PGltZyBzcmM9Imh0dHA6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy9kL2RjL0JsdWVfZm9sZGVyX3NldGhfeWFzdHJvdl8wMS5zdmciIHdpZHRoPSIzMCIgYWx0PSJsb3JlbSI+Li48L3RkPjwvdHI+JykNCgkJCWZvciAoaW5kZXggaW4ganNvbkRhdGEuRmlsZXMpIHsNCgkJCQlubSA9IGpzb25EYXRhLkZpbGVzW2luZGV4XS5OYW1lDQoJCQkJZGkgPSBqc29uRGF0YS5GaWxlc1tpbmRleF0uSXNEaXINCgkJCQlpZiAoanNvbkRhdGEuRmlsZXNbaW5kZXhdLklzRGlyKSB7DQoJCQkJCWluZXJIdG1sZmlsZXMgPSBpbmVySHRtbGZpbGVzLmNvbmNhdCgnPHRyIHdpZHRoPSI1Ij48dGQ+PGEgIG9uY2xpY2s9InNlbmRDU3RvcmUodGhpcykiIGlkPSInICsgJ2ZpJyArIG5tICsgJy8iIGNsYXNzPSJidG4gcHVsbC1sZWZ0IGJ0bi1zdWNjZXNzIGJ0bi14cyI+VXBsb2FkPC9hPjwvdGQ+JykNCgkJCQkJaW5lckh0bWxmaWxlcyA9IGluZXJIdG1sZmlsZXMuY29uY2F0KCc8dGQgb25jbGljaz0iY2hEaXIodGhpcykiICcgKyAnaWQ9IicgKyBubSArICciPjxpbWcgc3JjPSJodHRwOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvZC9kYy9CbHVlX2ZvbGRlcl9zZXRoX3lhc3Ryb3ZfMDEuc3ZnIiB3aWR0aD0iMzAiIGFsdD0ibG9yZW0iPicgKyBubSArICc8L3RkPjwvdHI+JykNCgkJCQl9IGVsc2Ugew0KCQkJCQlpbmVySHRtbGZpbGVzID0gaW5lckh0bWxmaWxlcy5jb25jYXQoJzx0ciB3aWR0aD0iNSI+PHRkPjxhICBvbmNsaWNrPSJzZW5kQ1N0b3JlKHRoaXMpIiBpZD0iJyArICdmaScgKyBubSArICciIGNsYXNzPSJidG4gcHVsbC1sZWZ0IGJ0bi1zdWNjZXNzIGJ0bi14cyI+VXBsb2FkPC9hPjwvdGQ+JykNCgkJCQkJaW5lckh0bWxmaWxlcyA9IGluZXJIdG1sZmlsZXMuY29uY2F0KCc8dGQgb25jbGljaz0iY2hEaXIodGhpcykiICcgKyAnaWQ9IicgKyBubSArICciPjxpbWcgc3JjPSJodHRwOi8vd3d3LmZyZWVjYWR3ZWIub3JnL3dpa2kvaW1hZ2VzLzIvMjkvRG9jdW1lbnQtbmV3LnN2ZyIgd2lkdGg9IjMwIiBhbHQ9ImxvcmVtIj4nICsgbm0gKyAnPC90ZD48L3RyPicpDQoJCQkJfQ0KCQkJfQ0KCQkJaW5lckh0bWxmaWxlcyA9IGluZXJIdG1sZmlsZXMuY29uY2F0KCc8L3Rib2R5PicpDQoJCQkkKCIjZmlsZXMtdGFiIikuYXBwZW5kKGluZXJIdG1sZmlsZXMpDQoJCX0NCg0KCQlmdW5jdGlvbiB1cGRhdGVKb2JzKCkgew0KCQkJJC5hamF4KHsNCgkJCQl1cmw6ICIvam9icyIsDQoJCQkJdHlwZTogIlBPU1QiLA0KCQkJCWRhdGFUeXBlOiAianNvbiINCgkJCX0pLmRvbmUoZnVuY3Rpb24oanNvbkRhdGEpIHsNCgkJCQl2YXIgaW5lckh0bWxqb2JzID0gIiINCgkJCQlmb3IgKGluZGV4IGluIGpzb25EYXRhKSB7DQoJCQkJCWluZXJIdG1sam9icyA9IGluZXJIdG1sam9icy5jb25jYXQoJzxsaSBjbGFzcz0ibGlzdC1ncm91cC1pdGVtIj4nICsganNvbkRhdGFbaW5kZXhdICsgJzwvbGk+JykNCgkJCQl9DQoJCQkJJCgiI2pvYnNsaXN0IikuaHRtbCgiIikNCgkJCQkkKCIjam9ic2xpc3QiKS5hcHBlbmQoaW5lckh0bWxqb2JzKQ0KCQkJfSkNCgkJfQ0KDQoJCWZ1bmN0aW9uIHNlbmRDR2V0KGUpIHsNCgkJCXN0ZHVpZCA9ICQoIiNzdHVpZCIgKyBlLmlkKS50ZXh0KCkNCgkJCWFuID0gJCgiI2FuIiArIGUuaWQpLnRleHQoKQ0KCQkJcG4gPSAkKCIjcG4iICsgZS5pZCkudGV4dCgpDQoJCQlwZCA9ICQoIiNwZCIgKyBlLmlkKS50ZXh0KCkNCgkJCXNkID0gJCgiI3NkIiArIGUuaWQpLnRleHQoKQ0KCQkJdmFyIGNmZGF0ID0gew0KCQkJCVNlcnZlclNldDogew0KCQkJCQlBZGRyZXNzOiAkKCIjYWRkcmVzcy1pZCIpLnZhbCgpLA0KCQkJCQlQb3J0OiAkKCIjcG9ydC1pZCIpLnZhbCgpLA0KCQkJCQlDbGllbnRBRV9UaXRsZTogJCgiI2NsaWVudC1hZXRpdGxlLWlkIikudmFsKCksDQoJCQkJCVNlcnZlckFFX1RpdGxlOiAkKCIjc2VydmVyLWFldGl0bGUtaWQiKS52YWwoKQ0KCQkJCX0sDQoJCQkJU3R1ZHlJbnN0YW5jZVVJRDogc3RkdWlkLA0KCQkJCVBhdGllbnROYW1lOiBwbiwNCgkJCQlBY2Nlc3Npb25OdW1iZXI6IGFuLA0KCQkJCVBhdGllbkRhdGVPZkJpcnRoOiBwZCwNCgkJCQlTdHVkeURhdGU6IHNkDQoJCQl9DQoJCQl2YXIgY2cgPSB7DQoJCQkJRmluZFJlcTogY2ZkYXQsDQoJCQkJRm9sZGVyOiBjdXJkaXINCgkJCX0NCgkJCWNvbnNvbGUubG9nKGNnKQ0KCQkJJC5hamF4KHsNCgkJCQl1cmw6ICIvYy1nZXQiLA0KCQkJCXR5cGU6ICJQT1NUIiwNCgkJCQlkYXRhOiBKU09OLnN0cmluZ2lmeShjZyksDQoJCQkJZGF0YVR5cGU6ICJqc29uIg0KCQkJfSkNCgkJfQ0KDQoJCWZ1bmN0aW9uIHNlbmRDU3RvcmUoZSkgew0KCQkJdmFyIGZwID0gY3VyZGlyICsgJy8nICsgZS5pZC5zdWJzdHJpbmcoMikNCgkJCXZhciBjc2RhdCA9IHsNCgkJCQlTZXJ2ZXJTZXQ6IHsNCgkJCQkJQWRkcmVzczogJCgiI2FkZHJlc3MtaWQiKS52YWwoKSwNCgkJCQkJUG9ydDogJCgiI3BvcnQtaWQiKS52YWwoKSwNCgkJCQkJQ2xpZW50QUVfVGl0bGU6ICQoIiNjbGllbnQtYWV0aXRsZS1pZCIpLnZhbCgpLA0KCQkJCQlTZXJ2ZXJBRV9UaXRsZTogJCgiI3NlcnZlci1hZXRpdGxlLWlkIikudmFsKCkNCgkJCQl9LA0KCQkJCUZpbGU6IGZwLA0KCQkJfQ0KCQkJY29uc29sZS5sb2coY3NkYXQpDQoJCQkkLmFqYXgoew0KCQkJCXVybDogIi9jLWN0b3JlIiwNCgkJCQl0eXBlOiAiUE9TVCIsDQoJCQkJZGF0YTogSlNPTi5zdHJpbmdpZnkoY3NkYXQpLA0KCQkJCWRhdGFUeXBlOiAianNvbiINCgkJCX0pDQoJCX0NCg0KCQlmdW5jdGlvbiBPbkxvYWQoKSB7DQoJCQljZlRpbWUgPSAwLjA7DQoJCQl1cGRhdGVVaSgpDQoJCQkJLy91cGRhdGVDRWNob1N0KCkNCgkJCXNldEludGVydmFsKHVwZGF0ZUNFY2hvU3QsIDcwMCkNCgkJCXNldEludGVydmFsKHVwZGF0ZUpvYnMsIDIwMDApDQoJCQlmaXJzVXBkYXRlKCkNCgkJfQ0KDQoJCWZ1bmN0aW9uIFNob3dTZWFyY2goKSB7DQoJCQlTaG93TWVudSA9ICJzZWFyY2giDQoJCQl1cGRhdGVVaSgpDQoJCX0NCg0KCQlmdW5jdGlvbiBTaG93VXBsb2FkKCkgew0KCQkJU2hvd01lbnUgPSAidXBsb2FkIg0KCQkJdXBkYXRlVWkoKQ0KCQl9DQoNCgkJZnVuY3Rpb24gU2hvd0pvYnMoKSB7DQoJCQlTaG93TWVudSA9ICJqb2JzIg0KCQkJdXBkYXRlSm9icygpDQoJCQl1cGRhdGVVaSgpDQoJCX0NCgk8L3NjcmlwdD4NCjwvaGVhZD4NCg0KPGJvZHkgb25sb2FkPSJPbkxvYWQoKSI+DQoJPGRpdiBjbGFzcz0iY29udGFpbmVyIj4NCgkJPGRpdiBjbGFzcz0id2VsbCI+DQoJCQk8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWRlZmF1bHQiPg0KCQkJCTxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQoJCQkJCTxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPg0KCQkJCQkJPGJ1dHRvbiB0eXBlPSJidXR0b24iIGNsYXNzPSJuYXZiYXItdG9nZ2xlIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIubmF2YmFyLWNvbGxhcHNlIj4gPHNwYW4gY2xhc3M9InNyLW9ubHkiPlRvZ2dsZSBuYXZpZ2F0aW9uPC9zcGFuPjxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPjxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPjxzcGFuIGNsYXNzPSJpY29uLWJhciI+PC9zcGFuPiA8L2J1dHRvbj4NCgkJCQkJPC9kaXY+DQoJCQkJCTxkaXYgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSI+DQoJCQkJCQk8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4NCgkJCQkJCQk8bGkgb25jbGljaz0iU2hvd1NlYXJjaCgpIj4gPGE+U2VhcmNoPC9hPiA8L2xpPg0KCQkJCQkJCTxsaSBvbmNsaWNrPSJTaG93VXBsb2FkKCkiPiA8YT5TdHVkeSBVcGxvYWQ8L2E+IDwvbGk+DQoJCQkJCQkJPGxpIG9uY2xpY2s9IlNob3dKb2JzKCkiPiA8YT5Kb2JzPC9hPiA8L2xpPg0KCQkJCQkJPC91bD4NCgkJCQkJPC9kaXY+DQoJCQkJPC9kaXY+DQoJCQk8L2Rpdj4NCgkJCTxkaXYgY2xhc3M9InBhbmVsLWZvb3RlciI+RElDT00gU2VydmVyIHNldHRpbmdzIDwvZGl2Pg0KCQkJPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jb25kZW5zZWQgdGFibGUtaG92ZXIgdGFibGUtc3RyaXBlZCI+DQoJCQkJPHRib2R5Pg0KCQkJCQk8dHI+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+RElDT00gc2VydmVyIGFkZHJlc3M8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9ImFkZHJlc3MtaWQiIHZhbHVlPSIyMTMuMTY1Ljk0LjE1OCI+IDwvZGl2Pg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5DbGllbnQgQUUtVGl0bGU8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9ImNsaWVudC1hZXRpdGxlLWlkIiB2YWx1ZT0iQUVfRFRMUyI+IDwvZGl2Pg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5TZXJ2ZXIgQUUtVGl0bGU8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9InNlcnZlci1hZXRpdGxlLWlkIiB2YWx1ZT0iRENNNENIRUUiPiA8L2Rpdj4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+UG9ydCBudW1iZXI8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9InBvcnQtaWQiIHZhbHVlPSIxMTExMiI+IDwvZGl2Pg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5ESUNPTSBwaW5nIHN0YXR1czo8L2xhYmVsPg0KCQkJCQkJCQk8cD4NCgkJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCIgaWQ9InBhY3Mtc3RhdHVzLWlkIj5PSzwvbGFiZWw+DQoJCQkJCQkJCTwvcD4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCTwvdHI+DQoJCQkJPC90Ym9keT4NCgkJCTwvdGFibGU+DQoJCQk8ZGl2IGNsYXNzPSJwYW5lbC1mb290ZXIiIGlkPSJzZWFyY2gtZm9vdGVyIj5TZWFyY2ggU2V0dGluZ3MgPC9kaXY+DQoJCQk8dGFibGUgaWQ9InNlYXJjaC1wYW5lbCIgY2xhc3M9InRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNvbmRlbnNlZCB0YWJsZS1ob3ZlciB0YWJsZS1zdHJpcGVkIj4NCgkJCQk8dGJvZHk+DQoJCQkJCTx0cj4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5TdHVkeSBJbnN0YW5jZSBVSUQ8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9InN0LWluc3QtdWlkIiB2YWx1ZT0iKiI+IDwvZGl2Pg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5BY2Nlc3Npb24gbnVtYmVyPC9sYWJlbD4NCgkJCQkJCQkJPGRpdiBjbGFzcz0iY29udHJvbHMiPg0KCQkJCQkJCQkJPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQtc20iIGlkPSJhY2Nlc3Npb24tbnVtYmVyLWlkIiB2YWx1ZT0iKiI+IDwvZGl2Pg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4NCgkJCQkJCQkJPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj5QYXRpZW50IG5hbWU8L2xhYmVsPg0KCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb250cm9scyI+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBpbnB1dC1zbSIgaWQ9InBhdGllbnQtbmFtZS1pZCIgdmFsdWU9IioiPiA8L2Rpdj4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+RGF0ZSBvZiBiaXJ0aDwvbGFiZWw+DQoJCQkJCQkJCTxkaXYgY2xhc3M9ImNvbnRyb2xzIj4NCgkJCQkJCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXNtIiBpZD0iZGF0ZS1iaXJ0aC1pZCIgdmFsdWU9IioiPiA8L2Rpdj4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+U3R1ZHkgZGF0ZTwvbGFiZWw+DQoJCQkJCQkJCTxkaXYgY2xhc3M9ImNvbnRyb2xzIj4NCgkJCQkJCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGlucHV0LXNtIiBpZD0ic3R1ZHktZGF0ZS1pZCIgdmFsdWU9IioiPiA8L2Rpdj4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+DQoJCQkJCQkJCTxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+IDwvbGFiZWw+DQoJCQkJCQkJCTxkaXYgY2xhc3M9ImNvbnRyb2xzIj4gPGEgb25jbGljaz0ic2VuZENGaW5kKCkiIGNsYXNzPSJidG4gcHVsbC1sZWZ0IGJ0bi1pbmZvIj5GIEkgTiBEPC9hPiA8L2Rpdj4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCTwvdHI+DQoJCQkJPC90Ym9keT4NCgkJCTwvdGFibGU+DQoJCQk8ZGl2IGNsYXNzPSJwYW5lbC1mb290ZXIiIGlkPSJzZXJmb290ZXItaWQiPkMtRmluZCByZXN1bHQ8L2Rpdj4NCgkJCTx0YWJsZSBjbGFzcz0idGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtY29uZGVuc2VkIHRhYmxlLWhvdmVyIHRhYmxlLXN0cmlwZWQiIGlkPSJzZXJ0YWJsZS1pZCI+DQoJCQkJPHRoZWFkPg0KCQkJCQk8dHI+DQoJCQkJCQk8dGggc3R5bGU9IndpZHRoOiAxJTsiPlNhdmU8L3RoPg0KCQkJCQkJPHRoIHN0eWxlPSJ3aWR0aDogMyU7Ij5TdHVkeSBJbnN0YW5jZSBVSUQ8L3RoPg0KCQkJCQkJPHRoIHN0eWxlPSJ3aWR0aDogMjAlOyI+QWNjZXNzaW9uIG51bWJlcjwvdGg+DQoJCQkJCQk8dGg+UGF0aWVudCBuYW1lPC90aD4NCgkJCQkJCTx0aCBzdHlsZT0id2lkdGg6IDI1JTsiPlBhdGllbnQgZGF0ZSBvZiBiaXJ0aDwvdGg+DQoJCQkJCQk8dGggc3R5bGU9IndpZHRoOiAxNSU7Ij5TdHVkeSBkYXRlPC90aD4NCgkJCQkJPC90cj4NCgkJCQk8L3RoZWFkPg0KCQkJCTx0Ym9keSBpZD0ic2VyY2hyZXNsaXN0Ij4gPC90Ym9keT4NCgkJCTwvdGFibGU+DQoJCQk8ZGl2IGNsYXNzPSJwYW5lbC1mb290ZXIiIGlkPSJ1cGxvYWRmb290ZXItaWQiPlVwbG9hZDwvZGl2Pg0KCQkJPHRhYmxlIGlkPSJmaWxlcy10YWIiIGNsYXNzPSJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zdHJpcGVkIHRhYmxlLWNvbmRlbnNlZCI+DQoJCQkJPHRoZWFkPg0KCQkJCQk8dHI+DQoJCQkJCQk8dGggc3R5bGU9IndpZHRoOiAxJTsiPlNlbGVjdDwvdGg+DQoJCQkJCQk8dGg+RmlsZSBOYW1lPC90aD4NCgkJCQkJPC90cj4NCgkJCQk8L3RoZWFkPg0KCQkJCTx0Ym9keSBpZD0iZmlsZXMtaWQiPg0KCQkJCQk8dHI+DQoJCQkJCQk8dGQ+DQoJCQkJCQkJPGRpdiBjbGFzcz0iY2hlY2tib3ggcHVsbC1sZWZ0Ij4NCgkJCQkJCQkJPGxhYmVsPg0KCQkJCQkJCQkJPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2YWx1ZT0idHJ1ZSI+IDwvbGFiZWw+DQoJCQkJCQkJPC9kaXY+DQoJCQkJCQk8L3RkPg0KCQkJCQkJPHRkPk1pY2hhZWw8L3RkPg0KCQkJCQkJPHRkPm5vPC90ZD4NCgkJCQkJPC90cj4NCgkJCQkJPHRyPg0KCQkJCQkJPHRkPg0KCQkJCQkJCTxkaXYgY2xhc3M9ImNoZWNrYm94IHB1bGwtbGVmdCI+DQoJCQkJCQkJCTxsYWJlbD4NCgkJCQkJCQkJCTxpbnB1dCB0eXBlPSJjaGVja2JveCIgdmFsdWU9InRydWUiPiA8L2xhYmVsPg0KCQkJCQkJCTwvZGl2Pg0KCQkJCQkJPC90ZD4NCgkJCQkJCTx0ZD5NaWNoYWVsPC90ZD4NCgkJCQkJCTx0ZD5ubzwvdGQ+DQoJCQkJCTwvdHI+DQoJCQkJCTx0cj4NCgkJCQkJCTx0ZD4NCgkJCQkJCQk8ZGl2IGNsYXNzPSJjaGVja2JveCBwdWxsLWxlZnQiPg0KCQkJCQkJCQk8bGFiZWw+DQoJCQkJCQkJCQk8aW5wdXQgdHlwZT0iY2hlY2tib3giIHZhbHVlPSJ0cnVlIj4gPC9sYWJlbD4NCgkJCQkJCQk8L2Rpdj4NCgkJCQkJCTwvdGQ+DQoJCQkJCQk8dGQ+TWljaGFlbDwvdGQ+DQoJCQkJCQk8dGQ+bm88L3RkPg0KCQkJCQk8L3RyPg0KCQkJCTwvdGJvZHk+DQoJCQk8L3RhYmxlPg0KCQkJPGRpdiBjbGFzcz0icGFuZWwtZm9vdGVyIiBpZD0iam9ic2xpc3Rmb290ZXItaWQiPkpvYnM8L2Rpdj4NCgkJCTx1bCBpZD0iam9ic2xpc3QiIGNsYXNzPSJsaXN0LWdyb3VwIj4NCgkJCQk8bGkgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSI+Rmlyc3QgSXRlbTwvbGk+DQoJCQkJPGxpIGNsYXNzPSJsaXN0LWdyb3VwLWl0ZW0iPlNlY29uZCBJdGVtPC9saT4NCgkJCQk8bGkgY2xhc3M9Imxpc3QtZ3JvdXAtaXRlbSI+VGhpcmQgSXRlbTwvbGk+DQoJCQk8L3VsPg0KCQk8L2Rpdj4NCgk8L2Rpdj4NCjwvYm9keT4NCg0KPC9odG1sPg=="

//main srv class
type HL7Js struct {
	hl7c HL7Client
}

//start and init srv
func (srv *HL7Js) Start(listenPort int) error {
	//http.HandleFunc("/index.html", srv.index)
	http.HandleFunc("/jobs", srv.SendADTA01)
	http.HandleFunc("/index.html", srv.index)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return errors.New("error: can't start listen http server")
	}
	return nil
}

//serve main page request
func (srv *HL7Js) index(rwr http.ResponseWriter, req *http.Request) {
	rwr.Header().Set("Content-Type: text/html", "*")

	content, err := ioutil.ReadFile("index.html")
	if err != nil {
		log.Println("warning: start page not found, return included page")
		val, _ := base64.StdEncoding.DecodeString(htmlData)
		rwr.Write(val)
		return
	}
	rwr.Write(content)
}

func (service *HL7Js) Redirect(responseWriter http.ResponseWriter, request *http.Request) {
	http.Redirect(responseWriter, request, "/index.html", 301)
}

//serve cEcho responce
func (srv *HL7Js) SendADTA01(rwr http.ResponseWriter, req *http.Request) {
	defer req.Body.Close()
	bodyData, err := ioutil.ReadAll(req.Body)
	if err != nil {
		strErr := "error: Can't read http body data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}
	var pd PatientData
	if err := json.Unmarshal(bodyData, &pd); err != nil {
		strErr := "error: can't parse DicomCEchoRequest data"
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(strErr)
		return
	}

	err = srv.hl7c.ADTA01(pd, "", 567)
	if err != nil {
		log.Printf("error: can't adt")
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return

	}
	rwr.Write(make([]byte, 1))
}
